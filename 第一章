1.1spring概述
1.1.1
第一阶段：xml配置

第二阶段：注解配置
应用的基本配置用xml，业务配置用注解

第三阶段：java配置
推荐使用

1.1.2
spring框架主要提供了iox容器、aop、数据访问、web开发、消息、测试等相关技术的支持

spring模块
核心容器：spring-core spring-beans spring-context spring-context-support spring-expression
aop：spring-aop spring-aspect
消息：spring-message
web：spring-web spring-webmvc spring-websocket spring webmvc-portlet
数据访问/集成：spring-jdbc spring-tx spring-orm spring-oxm spring-jms

spring生态
spring data spring boot spring cloud spring mobile等

1.2 spring项目快速搭建
传统方式：创建新项目，复制第三方jar包到类路径下
项目构建工具：ant maven gradle
maven:project object model 管理项目的依赖、编译、文档等
项目以来jar包不在包含项目中，集中放在.m2文件下

maven中pom.xml
dependencies dependency properties 编译插件

spring项目搭建
1基于spring tool suite搭建
2基于idea
3基于netbean

1.3spring基础配置
1.3.1依赖注入
inversion of control\ dependency injection
控制反转是通过依赖注入实现的  依赖注入指的是容器负责创建对象和维护对象间 的依赖关系 而不是通过对象本身赋值自身创建和解决自己的依赖
依赖注入的主要目的是为了解耦 ioc容器（applicationcontext）负责创建bean通过容器将功能类bean注入到需要的bean中 spring通过xml、注解、java配置、groovy配置来实现bean创建和注入
xml、注解、java配置都被称为配置元数据（描述数据的数据）本身没有任何执行能力，只能通过外界代码对数据进行解析后进行一些有意义操作

声明bean注解：@component @service @repository @controller
注入bean注解：@autowired @inject @resource
配置类

@Configuration声明当前类是一个配置类
@ComponentScan自动扫描包名下所有使用@component @service @repository @controller的类 并注册为bean


1.3.2 java配置
java配置是通过@configuaration @bean实现
@configuration 声明当前类是一个配置类相当于一个spring的xml文件
@bean注解在方法上声明当前方法的返回值为一个bean

java配置和注解混合配置原则：全局配置使用java配置（如数据库相关配置、MVC相关配置），业务bean的配置是以哦那个注解配置（@component @service @repository @controller）

1.3.3 aop
spring aop的存在目的是为了解耦，让一组类共享相同的行为，oop中只能通过继承类和实现接口来事代码的耦合度增强，aop弥补了oop的不足

spring支持aspectj注解式切面编程
使用@aspect声明是一个切面
使用@after @before @around定义建言（advice），可直接将拦截规则（切点）作为参数
